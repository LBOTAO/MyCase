异常-----
课后题 
A A AD D C

二，
1.顶级异常Exception应放在最后的catch块中。
2.   2   3  4    因为try中遇到异常时，跳到catch块中处理异常，然最终走finally执行，然后再往下执行


3.
	try {
			int[] arr = new int[5];
			for (int i = 0; i < 8; i++) {
				System.out.println(arr[i]);
			}
		} catch (ArrayIndexOutOfBoundsException e) {
			e.printStackTrace();
		}
		
4.
Error与Exception 
Error是程序无法处理的错误，比如OutOfMemoryError、ThreadDeath等。这些异常发生时， Java虚拟机（JVM）一般会选择线程终止。 
Exception是程序本身可以处理的异常，这种异常分两大类运行时异常和非运行时异常。  程序中应当尽可能去处理这些异常。 
  运行时异常和非运行时异常 
        运行时异常都是RuntimeException类及其子类异常，如NullPointerException、IndexOutOfBoundsException等，
        非运行时异常是RuntimeException以外的异常，类型上都属于Exception类及其子类。 
    从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。 
    如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。 
    
    异常的捕获和处理 
 Java异常处理涉及到五个关键字，分别是：try、catch、finally、throw、throws。
 
 
2018年5月13日16:51:34  集合框架----------------

   1. ArrayList存储一组不唯一  有序（插入对象）的对象
   
   2.set存储一组唯一  无序的对象
      
   3.ArrayList实现了长度可变的数组，遍历元素和随机访问的效率比较高。
    S
   4.LinkedList使用链表方式存储。  插入元素  删除元素  修改元素效率比较高。
   
  
      如果两个字符串的内容一致，则hash一致
      如果两个字符串的hash一致，内容有可能不一致    
      
2018年5月14日11:38:17 集合框架第二次课------------

逻辑题：
   一个工人干七天一天就发次工资,老板有根金条只能切两次,怎么分?
   
　这道题解决的主要难点在于：不是给出去的就收不回来了，可以用交换的方法。
　　把金条分成三段（就是分两次，或者切两刀），分别是整根金条的一段   二段  四段

第一天  给一段               老板手里有  2段   4段
第二天  给两段 收回一段      老板手里有  1段   4段
第三天  给一段               老板手里有  4段
第四天  收回一段 两段 给四段 老板手里有  1段   2段
第五天  给一段               老板手里有  2段
第六天  给二段，收回一段     老板手里有  1段
第七天  给一段               老板手里有  0段 
---------------------------------------------------------------
集合框架 课后练习题
1.C D AD B C
二。
1.三大类>>>>>Set接口，特点可以存储无序·唯一的对象。
              实现类：
              A.HashSet,底层用了哈希表来支持，特点是存储速度很快
              B.TreeSet,底层用了二叉树来支持，特点是如果元素具备自然顺序的特点，那么TreeSet会按照自然顺序来排序存储

    >>>>>List接口，特点，可以存储有序，重复的对象
              实现了List接口的类
              A.ArrayList,底层是靠维护了一个Object类型的数组来实现数组的存储，
                特点是：查询快，增删慢（一定要定义长度，如果没有，内部默认给10的长度）

              B.底层是链表，特点是：查询慢，但增删很快（不需要规定长度）

    >>>>>Map接口，存储一组成对的键—值，提供Key到value的映射，key不要求有序不允许重复。value同样不要求有序，但是允许重复。
              实现类：
      HashMap 是最常见的 Map 实现类，它的存储方式是哈希表，优点是查询指定元素效率高。

2、根据你的理解，请说明一下 ArrayList 和 LinkedList 的区别。
ArrayList底层是一个数组，必须有长度。Linklist的底层是链表，不需要初始化长度。

3.
String str=pList.get(i);   是Object接收。需要强转。  执行结果 ABC

4.        LinkedList list = new LinkedList(); list.addFirst("1");
		  list.addFirst("2");
		  list.addFirst("3"); 
		  System.out.println(list);
		  System.out.print(list.removeLast());
		  System.out.print(list.removeLast());
		  
5.

public class StudentInfo {

	public static void main(String[] args) {
		Map<String, Integer> map = new HashMap<>();
		map.put("张三	", 100);
		map.put("张四", 85);
		map.put("张五", 90);
		
		for (Entry<String, Integer> values : map.entrySet()) {
			System.out.println(values.getKey()+"===="+values.getValue());
		}
		map.put("张四", 86);
		System.out.println("修改后================");
		for (Entry<String, Integer> values : map.entrySet()) {
			System.out.println(values.getKey()+"===="+values.getValue());
		}
	}

}

多线程  课后题  2018年5月18日14:56:51--------------------------------------
A  B   C   C    A   D

2.  简答题部分
第1题
回答要点：
单CPU的计算机中，CPU同时只能执行一条指令，因此，在仅有一个CPU的计算机上不可能同时执行多个任务。而操作系统为了能提高程序的运行效率，
将CPU的执行时间分成多个时间片，分配给不同的线程，当一个时间片执行完毕后，该线程就可能让出CPU使用权限交付给下一个时间片的其他线程执行。
当然有可能相邻的时间片分配给同一线程。之所以表面上看是多个线程同时执行，是因为不同线程之间切换的时间非常短，也许仅仅是几毫秒，对普通人来说是难以感知的，
这样就看似多个线程在同时执行了。

第2题
回答要点：
线程实例调用start()方法和调用run()方法有着天壤之别，前者是调用实例方法，只有主线程执行，只有一条执行路径，后者是启动线程。

第3题
回答要点：
任何线程一般都具有5种状态，即创建、就绪、运行、阻塞、终止状态。
1．	创建状态
在程序中用构造方法创建了一个线程对象后，新的线程对象就处于创建状态，此时，它已经获取了相应的资源，但还没有处于可运行状态，
这时可以通过Thread类的方法来设置线程对象的属性，如设置线程名（setName()）、设置线程优先级（setPriority()）等。
2．	就绪状态
线程创建之后，就可以通过调用start()方法启动线程，即进入就绪状态。此时，线程将进入线程队列排队，等待CPU资源，
这表明它已经具备了运行条件，在未获得CPU资源时，仍不能真正执行。举例来说，去医院看病，某主任的专家号每天只有20个，
挂上号的病人还需在分诊处等待叫号。这里每个挂到专家号的病人可以看成一个就绪状态的线程。
3．	运行状态
当就绪状态的线程获得CPU资源时，即可转入运行状态，执行的run()方法。对于只有一个CPU的机器而言，
任何时刻只能有一个处于运行状态的线程占用CPU，即获得CPU资源。延续上面医院看病的例子，被叫到的病人才能真正就诊，而每个主任专家在一个时刻只能为一个病人看病。
4．	阻塞状态
一个正在运行的线程因某种原因不能继承运行时，进入阻塞状态。阻塞状态是一种“不可运行”的状态，
而处于这种状态的线程在得到一个特定的事件之后会转回可运行状态。举例来说，轮到小张看病了，医生为查明原因要求他去做个化验，
医生得到化验结果后才能继续诊断，如果把医生给小张看病看作一个线程，该线程此时即处于阻塞状态。

可能使线程暂停执行的条件：
	线程优先级比较低，因此它不能获得CPU资源。
	使用sleep()方法使线程休眠。
	通过调用wait()方法，使线程等待。
	通过调用yield()方法，线程显式出让CPU控制权。
	线程由于等待一个文件I/O事件被阻塞。

5．	死亡状态
一个线程的run()方法运行完毕，线程则进入死亡状态。处于死亡状态的线程不具有继承运行的能力。
示例6描述了线程可能具有的某些状态


一个线程的生命周期
创建
         创建 一个线程对象 
就绪
        调用start（） 时
运行
        执行run（）时
堵塞

 -| 等待阻塞
     -|运行状态中的线程执行wait方法
 -| 同步阻塞线程获取sychronized同步锁失败   （被其他线程占用 ）   
 -| 其他阻塞  sleep（）  join（）强制执行
死亡
一个运行线程完成任务  或者执行了其他终止线程的条件     比如异常终止



IO 课后习题----2018年5月21日17:25:52
B  C  B   B  B  A

二。
1.
	第一套：字节流读取写入方案
	FileInputStream :字节流方式读取文本文件
	FileOutputStream：字节流写入硬盘
	 
	第二套：字符流读取写入方案
	FileReader：字符流读取文本
	FileWriter：字符流写入文本

2.IOException














































